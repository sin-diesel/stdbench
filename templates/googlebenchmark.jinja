{% extends "base.jinja" %}
{% block includes %}
#include <benchmark/benchmark.h>
{% endblock %}

{% block benchmark_function %}
  static void {{name}}(benchmark::State& state) {
  {% block setup %}
    {% block init_container %}
    {% endblock %}
  {% endblock %}
  {% block loop %}
  for (auto _: state) {
    {% block benchmark %}
    {% endblock %}
  }
  {% endblock %}
}
{% endblock %}

{% block bench_register %}
BENCHMARK({{name}});
int main(int argc, char** argv) {
    // STDBENCH_METADATA_BEGIN
    benchmark::AddCustomContext("name", "{{ name }}");
    benchmark::AddCustomContext("policy", "{{ policy }}");
    benchmark::AddCustomContext("container", "{{ container }}");
    benchmark::AddCustomContext("type", "{{ type }}");
    benchmark::AddCustomContext("predicate", "{{ predicate }}");
    benchmark::AddCustomContext("size", "{{ size }}");
    // STDBENCH_METADATA_END

    benchmark::Initialize(&argc, argv);
    benchmark::RunSpecifiedBenchmarks();
    benchmark::Shutdown();
    return 0;
}
{% endblock %}

