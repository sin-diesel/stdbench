{% extends "googlebenchmark.jinja" %}
{% block includes %}
{{ super() }}

#include <algorithm>
#include <execution>
#include <numeric>
#include <iostream>
#include <random>

size_t size__ = 0;
{% endblock %}


{% block benhcmark_function %}
{{ super () }}
  {% block setup %}


  {{ container }}<{{ type }}> input_container__(size__);
  {{ container }}<{{ type }}> input_container_second__(size__);
  {{ container }}<{{ type }}> destination_container__(size__);

    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> dist(1, 100);
    std::generate(input_container__.begin(), input_container__.end(), [&](){return dist(gen);});
  {% if input == "random" %}
    std::generate(destination_container__.begin(), destination_container__.end(), [&](){return dist(gen);});
  {% else %}
    destination_container__ = {{ input }};
  {% endif %}
  {% endblock %}

  {% block benchmark %}
    {% set call = "std::" ~ name ~ "(std::execution::" ~ policy ~ "," ~ signature ~ ");"%}
    {% if return_val == "true" %} 
      auto result = {{ call }}
      benchmark::DoNotOptimize(result);
    {% else %}
      {{ call }}
      benchmark::DoNotOptimize(input_container__);
      benchmark::DoNotOptimize(destination_container__);
    {% endif %}
  {% endblock %}

{% endblock %}

{% block bench_register %}
{{ super() }}
int main(int argc, char** argv) {
    std::cin >> size__;
    
    ::benchmark::Initialize(&argc, argv);
    ::benchmark::RunSpecifiedBenchmarks();
}
{% endblock %}
