benchmarks:
  policy: ["par", "par_unseq", "seq"]
  input: ["random"]
  container: ["std::vector"]
  return: ["true"]
  container: ["std::vector"]
  type: ["int"]

  environment:
    compiler_options: ["-O2"]
    size: ["100000", "1000000", "10000000"]

  algorithms:
    - name: ["all_of", "any_of", "none_of", "find_if", "find_if_not", "remove_if", "is_partitioned", "partition", "stable_partition"]
      signature: ["input_container__.begin(), input_container__.end(), [](int i) { return i % 2 == 0; }"]

    - name: ["is_sorted_until", "is_sorted", "reduce"]
      signature: ["input_container__.begin(), input_container__.end()"] 

    - name: ["adjacent_find", "max_element", "min_element", "minmax_element"]
      signature: ["input_container__.begin(), input_container__.end(), [](int x, int y) { return x < y;}"]

    - name: ["copy", "move"]
      signature: ["input_container__.begin(), input_container__.end(), destination_container__.begin()"]

    - name: ["copy_n"]
      signature: ["input_container__.begin(), 1000, destination_container__.begin()"]

    - name: ["copy_if"]
      signature: ["input_container__.begin(), input_container__.end(), destination_container__.begin(), [](int i) { return i % 2 == 0; }"]

    - name: ["remove_copy_if"]
      signature: ["input_container__.begin(), input_container__.end(), destination_container__.begin(), [](int i) { return i % 2 == 0; }"]

    - name: ["find", "count"]
      signature: ["input_container__.begin(), input_container__.end(), 999"]

    - name: ["search_n"]
      signature: ["input_container__.begin(), input_container__.end(), 100, 999"]

    - name: ["find_end", "find_first_of", "search", "lexicographical_compare"]
      signature: ["input_container__.begin(), input_container__.end(), destination_container__.begin(), destination_container__.end(), [](int x, int y) { return x < y;}"]
      override:
        input: ["{1, 2, 3, 4, 5, 6, 7, 8}"]

    - name: ["unique_copy"]
      signature: ["input_container__.begin(), input_container__.end(), destination_container__.begin(), [](int x, int y) { return x < y; }"]

    - name: ["transform"]
      signature: ["input_container__.cbegin(), input_container__.cend(), input_container__.cbegin(), input_container__.begin(), std::plus<>{}"]
      override:
        policy: ["par", "par_unseq", "seq"]

    - name: ["mismatch"]
      signature: ["input_container__.begin(), input_container__.end(), destination_container__.begin(), destination_container__.end()"]
      override:
        input: ["{1, 2, 3, 4, 5, 6, 7, 8}"]

    - name: ["equal"]
      signature: ["input_container__.begin(), input_container__.end(), destination_container__.begin(), destination_container__.end()"]

    - name: ["reverse_copy"]
      signature: ["input_container__.begin(), input_container__.end(), destination_container__.begin()"]

    - name: ["partial_sort_copy", "includes"]
      signature: ["input_container__.begin(), input_container__.end(), destination_container__.begin(), destination_container__.end(), std::greater{}"]

    - name: ["rotate_copy"]
      signature: ["input_container__.begin(), input_container__.begin() + 1, input_container__.end(), destination_container__.begin()"]

    - name: ["adjacent_difference"]
      signature: ["input_container__.begin(), input_container__.end(), destination_container__.begin(), std::plus<>{}"] 

    - name: ["replace_copy_if"]
      signature: ["input_container__.begin(), input_container__.end(), destination_container__.begin(), [](int i) { return i % 2 == 0; }, 1000"]

    - name: ["set_union", "set_intersection", "set_difference", "set_symmetric_difference", "merge"]
      signature: ["input_container__.begin(), input_container__.end(), input_container_second__.begin(), input_container_second__.end(), std::back_inserter(destination_container__)"]

    - name: ["transform_inclusive_scan"]
      signature: ["input_container__.begin(), input_container__.end(), std::ostream_iterator<int>(std::cout, \" \"), std::plus<int>{}, [](int x) { return x * 10; }"]

    - name: ["transform_exclusive_scan"]
      signature: ["input_container__.begin(), input_container__.end(), std::ostream_iterator<int>(std::cout, \" \"), 0, std::plus<int>{}, [](int x) { return x * 10; }"]

    - name: ["exclusive_scan"]
      signature: ["input_container__.begin(), input_container__.end(), std::ostream_iterator<int>(std::cout, \" \"), 1, std::multiplies<>{}"]

    - name: ["inclusive_scan"]
      signature: ["input_container__.begin(), input_container__.end(), std::ostream_iterator<int>(std::cout, \" \"), std::multiplies<>{}"]

    - name: ["transform_reduce"]
      signature: ["input_container__.begin(), input_container__.end(), 0L, std::plus<int>{}, [](auto val) { return val * val; }"]

    - name: ["uninitialized_fill_n", "fill_n"]
      signature: ["destination_container__.begin(), 1000, 999"]
      override:
        return: ["false"]

    - name: ["generate"]
      signature: ["destination_container__.begin(), destination_container__.end(), [n = 0] () mutable { return n++; }"]
      override:
        return: ["false"]

    - name: ["generate_n"]
      signature: ["destination_container__.begin(), 1000, [n = 0] () mutable { return n++; }"]
      override:
        return: ["false"]

    - name: ["replace"]
      signature: ["input_container__.begin(), input_container__.end(), 998, 999"]
      override:
        return: ["false"]

    - name: ["uninitialized_value_construct_n"]
      signature: ["destination_container__.begin(), 1000"]
      override:
        return: ["false"]

    - name: ["uninitialized_value_construct", "reverse"]
      signature: ["destination_container__.begin(), destination_container__.end()"]
      override:
        return: ["false"]

    - name: ["sort", "stable_sort", "unique"]
      signature: ["input_container__.begin(), input_container__.end(), [](int x, int y) { return x < y; }"]
      override:
        return: ["false"]

    - name: ["fill"]
      signature: ["input_container__.begin(), input_container__.end(), 999"]
      override:
        return: ["false"]

    - name: ["partial_sort"]
      signature: ["input_container__.begin(), input_container__.begin() + 3, input_container__.end(), std::greater{}"]
      override:
        return: ["false"]


    - name: ["rotate", "nth_element"]
      signature: ["input_container__.begin(), input_container__.begin() + 1, input_container__.end()"]
      override:
        return: ["false"]

    - name: ["inplace_merge"]
      signature: ["input_container__.begin(), input_container__.begin() + (input_container__.end() - input_container__.begin()) / 2, input_container__.end()"]
      override:
        return: ["false"]




